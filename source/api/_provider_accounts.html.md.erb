# Provider Accounts
Ovation allows users to manage Provider Accounts, Providers (i.e. Physicians) and Provider Account Contacts through the following APIs.
You must first create a Provider Account and can then add associated Providers and Provider Account Contacts.
## Get Provider Accounts

**Summary:** Get All Provider Accounts

### HTTP Request
`GET /v3/provider_accounts`

```ruby
require "uri"
require "net/http"

url = URI("{api_endpoint}/api/v3/provider_accounts")

http = Net::HTTP.new(url.host, url.port);
request = Net::HTTP::Get.new(url)
request["Accept"] = "application/json"
request["Authorization"] = "Bearer {token}"

response = http.request(request)
puts response.read_body
```

```json
{
    "providerAccounts": [
        {
            "id": 736,
            "externalIdentifier": null,
            "name": "PQ Test Sales Account",
            "accountNumber": null,
            "salesReps": [
                {
                    "id": 699,
                    "firstName": "Sales Rep PQ Test",
                    "lastName": "Test",
                    "email": "test@ovation.io"
                }
            ],
            "organizationId": 659
        }
      ],
    "meta": {
        "currentPage": 1,
        "perPage": 5000,
        "totalEntries": 12
    }
}
```

**Parameters**

| Name | Located in | Description | Required | Type |
| ---- | ---------- | ----------- | -------- | ---- |
| organizationId | query | Organization ID | Yes | integer |
| name | query | Provider Account Name | No | string |
| externalIdentifier | query | Provider Account External Identifier. | No | string |
| accountNumber | query | Provider Account Number | No | string |
| page | query | Page of results. | No | integer |
| perPage | query | Results per page. Maximum of 5000. | No | integer |

**Responses**

| Code | Description |
| ---- | ----------- |
| 200 | Provider Accounts |

## Post Provider Account

**Summary:** Create a Provider Account

### HTTP Request
`POST /v3/provider_accounts`

```ruby
require "uri"
require "net/http"

url = URI("{api_endpoint}/api/v3/provider_accounts")
payload = {} # See payload tab

http = Net::HTTP.new(url.host, url.port);
request = Net::HTTP::Post.new(url)
request["Content-Type"] = "application/json"
request["Accept"] = "application/json"
request["Authorization"] = "Bearer {token}"
request.body = JSON.dump({ payload })

response = http.request(request)
puts response.read_body
```

```json-doc
{
  "providerAccount": {
    "name": "Fake Name",
    "externalIdentifier": "",
    "accountNumber": "546454",
    "streetAddress": "streetAddress",
    "streetAddressCity": "streetAddressCity",
    "streetAddressState": "streetAddressState",
    "streetAddressZipCode": "streetAddressZipCode",
    "mailingAddress": "fakename@email.com",
    "mailingAddressCity": "mailingAddressCity",
    "mailingAddressState": "mailingAddressState",
    "mailingAddressZipCode": "mailingAddressZipCode"
    "faxNumber": 151688952522,
    "emailReportReadyNotifications": true,
    "faxSignedReports": true,
    "salesRepId": 699
  }
}
```

```json
{
  "providerAccount": {
    "id": 736,
    "externalIdentifier": null,
    "name": "Fake Name",
    "accountNumber": 546454,
    "salesRep": {
      "id": 699,
      "firstName": "Sales Rep Test",
      "lastName": "Test",
      "email": "test@ovation.io"
    },
    "organizationId": 659,
    "streetAddress": "streetAddress",
    "streetAddressCity": "streetAddressCity",
    "streetAddressState": "streetAddressState",
    "streetAddressZipCode": "streetAddressZipCode",
    "mailingAddress": "fakename@email.com",
    "mailingAddressCity": "mailingAddressCity",
    "mailingAddressState": "mailingAddressState",
    "mailingAddressZipCode": "mailingAddressZipCode",
    "faxNumber": 151688952522,
    "emailReportReadyNotifications": true,
    "faxSignedReports": true,
    "providers": [
      {
        "id": 847,
        "name": "Test Provider",
        "registryIdentifier": "0000000000",
        "providerAccountId": 736,
        "licensingRegistry": "NPI"
      }
    ],
    "providerAccountContacts": [
      {
        "id": 1084,
        "externalIdentifier": null,
        "firstName": "Bob",
        "lastName": "Jones",
        "email": "bobjones@ovation.io",
        "officePhoneNumber": "",
        "cellPhoneNumber": null,
        "providerAccountId": 736
      }
    ]
  }
}
```

**Parameters**

| Name | Located in | Description | Required | Type |
| ---- | ---------- | ----------- | -------- | ---- |
| body | body | Provider Account record | Yes |  |

**Responses**

| Code | Description |
| ---- | ----------- |
| 200 | Created Provider |

## Get Provider Account

**Summary:** Get a Provider Account

### HTTP Request
`GET /v3/provider_accounts/{id}`

```ruby
require "uri"
require "net/http"

url = URI("{api_endpoint}/api/v3/provider_accounts/{id}?organization_id={organization_id}")

http = Net::HTTP.new(url.host, url.port);
request = Net::HTTP::Get.new(url)
request["Accept"] = "application/json"
request["Authorization"] = "Bearer {token}"


response = http.request(request)
puts response.read_body
```

```json
{
  "providerAccount": {
    "id": 736,
    "externalIdentifier": null,
    "name": "Fake Name",
    "accountNumber": 546454,
    "salesRep": {
      "id": 699,
      "firstName": "Sales Rep Test",
      "lastName": "Test",
      "email": "test@ovation.io"
    },
    "organizationId": 659,
    "streetAddress": "streetAddress",
    "streetAddressCity": "streetAddressCity",
    "streetAddressState": "streetAddressState",
    "streetAddressZipCode": "streetAddressZipCode",
    "mailingAddress": "fakename@email.com",
    "mailingAddressCity": "mailingAddressCity",
    "mailingAddressState": "mailingAddressState",
    "mailingAddressZipCode": "mailingAddressZipCode",
    "faxNumber": 151688952522,
    "emailReportReadyNotifications": true,
    "faxSignedReports": true,
    "providers": [
      {
        "id": 847,
        "name": "Test Provider",
        "registryIdentifier": "0000000000",
        "providerAccountId": 736,
        "licensingRegistry": "NPI"
      }
    ],
    "providerAccountContacts": [
      {
        "id": 1084,
        "externalIdentifier": null,
        "firstName": "Bob",
        "lastName": "Jones",
        "email": "bobjones@ovation.io",
        "officePhoneNumber": "",
        "cellPhoneNumber": null,
        "providerAccountId": 736
      }
    ]
  }
}
```

**Parameters**

| Name | Located in | Description | Required | Type |
| ---- | ---------- | ----------- | -------- | ---- |
| id | path | Sales Account ID | Yes | integer |
| organizationId | query | OrganizationId | Yes | integer |

**Responses**

| Code | Description |
| ---- | ----------- |
| 200 | Provider record |

## Put Provider Account

**Summary:** Update a Provider Account

### HTTP Request
`PUT /v3/provider_accounts/{id}`

```ruby
require "uri"
require "net/http"

url = URI("{api_endpoint}/api/v3/provider_accounts/{id}?organization_id={organization_id}")
payload = {} # See payload tab

http = Net::HTTP.new(url.host, url.port);
request = Net::HTTP::Put.new(url)
request["Content-Type"] = "application/json"
request["Accept"] = "application/json"
request["Authorization"] = "Bearer {token}"
request.body = JSON.dump({ payload })

response = http.request(request)
puts response.read_body
```

```json-doc
{
  "providerAccount": {
    "name": "Fake Name",
    "externalIdentifier": "",
    "accountNumber": "546454",
    "streetAddress": "streetAddress",
    "streetAddressCity": "streetAddressCity",
    "streetAddressState": "streetAddressState",
    "streetAddressZipCode": "streetAddressZipCode",
    "mailingAddress": "fakename@email.com",
    "mailingAddressCity": "mailingAddressCity",
    "mailingAddressState": "mailingAddressState",
    "mailingAddressZipCode": "mailingAddressZipCode"
    "faxNumber": 151688952522,
    "emailReportReadyNotifications": true,
    "faxSignedReports": true,
    "salesRepId": 699
  }
}
```

```json
{
  "providerAccount": {
    "id": 736,
    "externalIdentifier": null,
    "name": "Fake Name",
    "accountNumber": 546454,
    "salesRep": {
      "id": 699,
      "firstName": "Sales Rep Test",
      "lastName": "Test",
      "email": "test@ovation.io"
    },
    "organizationId": 659,
    "streetAddress": "streetAddress",
    "streetAddressCity": "streetAddressCity",
    "streetAddressState": "streetAddressState",
    "streetAddressZipCode": "streetAddressZipCode",
    "mailingAddress": "fakename@email.com",
    "mailingAddressCity": "mailingAddressCity",
    "mailingAddressState": "mailingAddressState",
    "mailingAddressZipCode": "mailingAddressZipCode",
    "faxNumber": 151688952522,
    "emailReportReadyNotifications": true,
    "faxSignedReports": true,
    "providers": [
      {
        "id": 847,
        "name": "Test Provider",
        "registryIdentifier": "0000000000",
        "providerAccountId": 736,
        "licensingRegistry": "NPI"
      }
    ],
    "providerAccountContacts": [
      {
        "id": 1084,
        "externalIdentifier": null,
        "firstName": "Bob",
        "lastName": "Jones",
        "email": "bobjones@ovation.io",
        "officePhoneNumber": "",
        "cellPhoneNumber": null,
        "providerAccountId": 736
      }
    ]
  }
}
```

**Parameters**

| Name | Located in | Description | Required | Type |
| ---- | ---------- | ----------- | -------- | ---- |
| id | path | Sales Account ID | Yes | integer |
| body | body | Provider Account record | Yes |  |

**Responses**

| Code | Description |
| ---- | ----------- |
| 200 | Provider record |

## Delete Provider Account

**Summary:** Delete a Provider Account

### HTTP Request
`DELETE /v3/provider_accounts/{id}`

```ruby
require "uri"
require "net/http"

url = URI("{api_endpoint}/api/v3/provider_accounts/{id}?organization_id={organization_id}")

http = Net::HTTP.new(url.host, url.port);
request = Net::HTTP::Delete.new(url)
request["Accept"] = "application/json"
request["Authorization"] = "Bearer {token}"

response = http.request(request)
puts response.read_body
```

```json
{
    "message": "Provider Account successfully archived"
}
```

**Parameters**

| Name | Located in | Description | Required | Type |
| ---- | ---------- | ----------- | -------- | ---- |
| id | path | Provider Account ID | Yes | integer |
| organizationId | query | Organization ID | Yes | integer |

**Responses**

| Code | Description |
| ---- | ----------- |
| 200 | Provider Account archived |
